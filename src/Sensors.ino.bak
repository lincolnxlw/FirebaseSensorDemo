#if defined(ESP32)
#include <WiFi.h>
#include <FirebaseESP32.h>
#elif defined(ESP8266)
#include <ESP8266WiFi.h>
#include <FirebaseESP8266.h>
#endif

//Provide the token generation process info.
#include "addons/TokenHelper.h"

//The FireSense class used in this example.
#include "addons/FireSense/FireSense.h"
#include <params.h>

FirebaseData fbdo1;
FirebaseData fbdo2;

FirebaseAuth auth;
FirebaseConfig config;

//The config data for FireSense class
Firesense_Config fsConfig;

unsigned long randomMillis = 0;

float humidity = 0;
float temperature = 0;

void printSerial(const char *msg)
{
    if (strlen(msg) > 0)
        Serial.println(msg);
}

void randomDemoSensorData()
{
    if (millis() - randomMillis > 5000)
    {
        randomMillis = millis();
        humidity = (float)random(100, 1000) / 10.1;
        temperature = (float)random(100, 500) / 10.1;
    }
}

void loadDefaultConfig()
{
    //The config can be set manually from below or read from the stored config file.

    //To store the current config file (read from database and store to device storage),
    //FireSense.backupConfig("/filename.txt" /* path of file to save */, mem_storage_type_flash /* or mem_storage_type_sd */);

    //To restore the current config (read from device storage and add to database),
    //FireSense.restoreConfig("/filename.txt" /* path of back up file to read */, mem_storage_type_flash /* or mem_storage_type_sd */);

    FireSense_Channel channel[2];

    channel[0].id = "HUMID1";
    channel[0].name = "Humidity sensor data";
    channel[0].location = "Room1 1";
    channel[0].type = Firesense_Channel_Type::Value;
    channel[0].status = true;   //to store value to the database status
    channel[0].log = true;      //to store value to the database log
    channel[0].value_index = 0; //this the index of bound user variable which added with FireSense.addUserValue
    FireSense.addChannel(channel[0]);

    channel[1].id = "TEMP1";
    channel[1].name = "Temperature sensor data";
    channel[1].location = "Room1 1";
    channel[1].type = Firesense_Channel_Type::Value;
    channel[1].status = true;   //to store value to the database status
    channel[1].log = true;      //to store value to the database log
    channel[1].value_index = 1; //this the index of bound user variable which added with FireSense.addUserValue
    FireSense.addChannel(channel[1]);

    FireSense_Condition cond[2];

    cond[0].IF = "HUMID1 < 30 || HUMID1 > 70";
    cond[0].THEN = "func(0,1,'\\n[FUNC0] The humidity ({HUMID1} %) is out of range.\\n')";
    FireSense.addCondition(cond[0]);

    cond[1].IF = "TEMP1 < 15 || TEMP1 > 40";
    cond[1].THEN = "func(0,1,'\\n[FUNC0] The temperature ({TEMP1} Â°C) is out of range.\\n')";
    FireSense.addCondition(cond[1]);
}

void setup()
{

    Serial.begin(115200);

    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
    Serial.print("Connecting to Wi-Fi");
    while (WiFi.status() != WL_CONNECTED)
    {
        Serial.print(".");
        delay(300);
    }
    Serial.println();
    Serial.print("Connected with IP: ");
    Serial.println(WiFi.localIP());
    Serial.println();

    Serial.printf("Firebase Client v%s\n\n", FIREBASE_CLIENT_VERSION);

    /* Assign the api key (required) */
    config.api_key = API_KEY;

    /* Assign the user sign in credentials */
    auth.user.email = USER_EMAIL;
    auth.user.password = USER_PASSWORD;

    /* Assign the RTDB URL (required) */
    config.database_url = DATABASE_URL;

    /* Assign the callback function for the long running token generation task */
    config.token_status_callback = tokenStatusCallback; //see addons/TokenHelper.h

    Firebase.begin(&config, &auth);

    //Or use legacy authenticate method
    //Firebase.begin(DATABASE_URL, DATABASE_SECRET);

    Firebase.reconnectWiFi(true);

    //Set up the config
    fsConfig.basePath = "/Sensors";
    fsConfig.deviceId = "Node1";
    fsConfig.time_zone = 3; //change for your local time zone
    fsConfig.daylight_offset_in_sec = 0;
    fsConfig.last_seen_interval = 60 * 1000;     //for store timestamp and time string in database
    fsConfig.log_interval = 60 * 1000;           //store data to database log every 60 seconds
    fsConfig.condition_process_interval = 20;    // check the conditions every 20 mSec
    fsConfig.dataRetainingPeriod = 24 * 60 * 60; //keep the log data within 1 day
    fsConfig.shared_fbdo = &fbdo1;               //for store/restore database values
    fsConfig.stream_fbdo = &fbdo2;               //for stream connection object, set this stream_fbdo to nullptr for less memory usage, the stream will connected through shared Firebase Data object.
    fsConfig.debug = true;

    //Add the user variable that will bind to the channels
    FireSense.addUserValue(&humidity);
    FireSense.addUserValue(&temperature);

    //Add the callback function that will bind to the func syntax
    FireSense.addCallbackFunction(printSerial);

    //Initiate the FireSense class
    FireSense.begin(&fsConfig, DATABASE_SECRET); //The database secret can be empty string when using the OAuthen2.0 sign-in method
    //Load the config from database or create the default config
    FireSense.loadConfig(loadDefaultConfig); //The loadDefaultConfig is the function to configure the channels and condition information.
}

void loop()
{
    //do not use delay or blocking operating code heare
    randomDemoSensorData();
}
